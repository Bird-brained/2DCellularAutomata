
#pragma kernel Vanilla
#pragma kernel Raw
#pragma kernel InterpolateLinear
#pragma kernel Ratio

sampler2D input;
RWTexture2D<float4> output;
float4 colors[3];
float2 deltaPixel;

[numthreads(8,8,1)]
void Vanilla (uint3 id : SV_DispatchThreadID)
{
    float4 pixel = tex2Dlod(input, float4(id.x * deltaPixel.x, id.y * deltaPixel.y, 0, 0));
    output[id.xy] = float4(colors[0].r * pixel.a, colors[0].g * pixel.a, colors[0].b * pixel.a, pixel.a);
}

[numthreads(8,8,1)]
void Raw (uint3 id : SV_DispatchThreadID)
{
    float4 pixel = tex2Dlod(input, float4(id.x * deltaPixel.x, id.y * deltaPixel.y, 0, 0));
    float red = pixel.r * colors[0].r + pixel.g * colors[1].r + pixel.b * colors[2].r;
    float green = pixel.r * colors[0].g + pixel.g * colors[1].g + pixel.b * colors[2].g;
    float blue = pixel.r * colors[0].b + pixel.g * colors[1].b + pixel.b * colors[2].b;
    float alpha = 1.0;
    output[id.xy] = float4(red, green, blue, alpha);
}

[numthreads(8,8,1)]
void InterpolateLinear (uint3 id : SV_DispatchThreadID)
{
    float4 pixel = tex2Dlod(input, float4(id.x * deltaPixel.x, id.y * deltaPixel.y, 0, 0));
    float weightAlive = clamp(pixel[0], 0.0, 1.0);
    float weightDead = clamp(pixel[1], 0.0, 1.0);
    float4 alive = colors[0];
    float4 born = colors[1];
    float4 dead = colors[2];
    pixel = float4(lerp(born, alive, float4(weightAlive, weightAlive, weightAlive, weightAlive)));
    pixel = float4(lerp(pixel, dead, float4(weightDead, weightDead, weightDead, weightDead)));
    output[id.xy] = pixel;
}

[numthreads(8,8,1)]
void Ratio (uint3 id : SV_DispatchThreadID)
{
    float4 pixel = tex2Dlod(input, float4(id.x * deltaPixel.x, id.y * deltaPixel.y, 0, 0));
    float4 color = colors[0];
    output[id.xy] = float4(color.r * pixel[2], color.g * pixel[2], color.b * pixel[2], 1.0);
}