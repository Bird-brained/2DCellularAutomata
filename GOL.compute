
#pragma kernel GGOL

RWTexture2D<float4> result;
sampler2D input;
float width;
float height;
float4 deltaPixel;
int4 rules[9];
float steppingFactor;
float4 mask;

[numthreads(8,8,1)]     //No changy... unless you know what you are doing
void GGOL(uint3 id : SV_DispatchThreadID)
{
    float2 position = float2((id.x) / width, (id.y) / height);
    float4 neighbors = float4(0.0, 0.0, 0.0, 0.0);
    float4 currentState = tex2Dlod(input, float4(position.x, position.y, 0, 0));

    //add up all neighboring cells
    neighbors += tex2Dlod(input, float4(position.x - deltaPixel.x, position.y + deltaPixel.y, 0, 0));
    neighbors += tex2Dlod(input, float4(position.x, position.y + deltaPixel.y, 0, 0));
    neighbors += tex2Dlod(input, float4(position.x + deltaPixel.x, position.y + deltaPixel.y, 0, 0));
    neighbors += tex2Dlod(input, float4(position.x - deltaPixel.x, position.y, 0, 0));
    neighbors += tex2Dlod(input, float4(position.x + deltaPixel.x, position.y, 0, 0));
    neighbors += tex2Dlod(input, float4(position.x - deltaPixel.x, position.y - deltaPixel.y, 0, 0));
    neighbors += tex2Dlod(input, float4(position.x, position.y - deltaPixel.y, 0, 0));
    neighbors += tex2Dlod(input, float4(position.x + deltaPixel.x, position.y - deltaPixel.y, 0, 0));
    int count = (int)(neighbors.a); //use alpha value as the total number of neighbors
    neighbors += currentState;
    float aliveCount = currentState.r;  //positive numbers express how long the cell has been alive and vice versa
    float deadCount = currentState.g;
    float nextState;
    //rules meaning:
    //0: alive = dead   ||  dead = dead
    //1: alive = dead   ||  dead = alive
    //2: alive = alive  ||  dead = dead
    //3: alive = alive  ||  dead = alive
    if(int(currentState.a) == 0){
        if(rules[count].a == 1 || rules[count].a == 3){
            nextState = 1.0;
            deadCount = 0.0;
            aliveCount = steppingFactor;
        }
        else{
            nextState = 0.0;
            deadCount += steppingFactor;
            aliveCount = 0.0;
        }
    } 
    else {
        if(rules[count].a >= 2.0){
            nextState = 1.0;
            aliveCount += steppingFactor;
            deadCount = 0.0;
        }
        else{
            nextState = 0.0;
            aliveCount = 0.0;
            deadCount = steppingFactor;
        }
    }
    result[id.xy] = float4(aliveCount * mask.r, deadCount * mask.g, (neighbors.r / neighbors.g) * mask.b, nextState * mask.a);
}






